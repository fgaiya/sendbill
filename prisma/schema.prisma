generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  company   Company?

  clients   Client[]
  quotes    Quote[]
  invoices  Invoice[]

  @@map("users")
}

model Company {
  id                        String   @id @default(cuid())
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String   @unique
  companyName               String
  businessName              String?
  logoUrl                   String?
  postalCode                String?
  prefecture                String?
  city                      String?
  street                    String?
  phone                     String?
  contactEmail              String?
  invoiceRegistrationNumber String?
  representativeName        String?
  bankName                  String?
  bankBranch                String?
  bankAccountNumber         String?
  bankAccountHolder         String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("companies")
}

model Client {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  name         String
  contactName  String?
  contactEmail String?
  address      String?
  phone        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  invoices     Invoice[]
  quotes       Quote[]

  @@index([userId])
  @@map("clients")
}

model Quote {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  quoteNumber String
  issueDate   DateTime
  expiryDate  DateTime?
  status      QuoteStatus @default(DRAFT)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  items       QuoteItem[]
  invoices    Invoice[]

  @@index([clientId])
  @@index([userId])
  @@index([status])
  @@unique([userId, quoteNumber])
  @@map("quotes")
}

model QuoteItem {
  id          String   @id @default(cuid())
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId     String
  description String
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(10, 2)
  taxRate     Decimal? @db.Decimal(5, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([quoteId])
  @@map("quote_items")
}

model Invoice {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  client        Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String
  quote         Quote?        @relation(fields: [quoteId], references: [id], onDelete: Restrict)
  quoteId       String?
  invoiceNumber String
  issueDate     DateTime
  dueDate       DateTime?
  status        InvoiceStatus @default(DRAFT)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         InvoiceItem[]

  @@index([clientId])
  @@index([quoteId])
  @@index([userId])
  @@index([status])
  @@unique([userId, invoiceNumber])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  description String
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(10, 2)
  taxRate     Decimal? @db.Decimal(5, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([invoiceId])
  @@map("invoice_items")
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  DECLINED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}
